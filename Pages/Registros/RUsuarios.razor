@page "/RUsuarios"
@page "/RUsuarios/{UsuarioId:int}"

@using BLL
@using Models

@inject IToastService Toast

<EditForm Model="usuario" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="view BackGroundGeneral">

        <div class="container shadow-lg p-3 rb-5 bg-light border-dark col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3>Registro de Usuarios</h3>
                </div>

                <div class="card-body">
                    <div class="form-group">
                        <label>UsuarioId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="usuario.UsuarioId" class="form-control" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary input-group-text oi-magnifying-glass" @onclick="Buscar">Buscar</button>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Nombres</label>
                        <InputText @bind-Value="usuario.Nombres" class="form-control" />
                        <ValidationMessage For="@(() => usuario.Nombres)" />
                    </div>

                    <div class="form-group">
                        <label>Nombre de Usuario</label>
                        <InputText @bind-Value="usuario.NombreUsuario" class="form-control" />
                        <ValidationMessage For="@(() => usuario.NombreUsuario)" />
                    </div>

                    <div class="form-group">
                        <label>Contraseña</label>
                        <input type="password" @bind-value="usuario.Contrasena" class="form-control" />
                        <ValidationMessage For="@(() => usuario.Contrasena)" />
                    </div>

                    <div class="form-group">
                        <label>Verificar Contraseña</label>
                        <input type="password" @bind-value="Password" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Email</label>
                        <InputText @bind-Value="usuario.Email" class="form-control" />
                        <ValidationMessage For="@(() => usuario.Email)" />
                    </div>

                    <!--Buttons--->

                    <div class="form-group text-center" display: inline-block>
                        <div class="btn-group mr-5" role="group" aria-label="First group">
                            <button type="button" class="btn btn-outline-secondary" @onclick="Nuevo">Nuevo</button>
                        </div>
                        <div class="btn-group mr-5" role="group" aria-label="Second group">
                            <button type="submit" class="btn btn-outline-success">Guardar</button>
                        </div>

                        <div class="btn-group" role="group" aria-label="Third group">
                            <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</EditForm>

@code{
    private Usuario usuario = new Usuario();

    [Parameter] public int UsuarioId { get; set; }

    private string Password { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
    }

    private void Nuevo()
    {
        usuario = new Usuario();
        Password = string.Empty;
    }

    private void Guardar()
    {
        if (usuario.Contrasena != Password)
        {
            Toast.ShowError("La Contraseña no coincide");
            return;
        }
        bool guardado;

        guardado = UsuarioBLL.Guardar(usuario);

        if (guardado)
        {
            Nuevo();
            Toast.ShowSuccess("Se ha Guardado Exitosamente");
        }
        else
            Toast.ShowError("Error, no se pudo Guardar");
    }

    private void Buscar()
    {
        if (usuario.UsuarioId > 0)
        {
            var encontrado = UsuarioBLL.Buscar(usuario.UsuarioId);
            if (encontrado != null)
            {
                usuario = encontrado;
            }
            else
            {
                Toast.ShowWarning("No se pudo localizar la Persona indicada");
            }
        }
    }

    private void Eliminar()
    {
        bool elimino;

        elimino = UsuarioBLL.Eliminar(usuario.UsuarioId);

        if (elimino)
        {
            Nuevo();
            Toast.ShowSuccess("Se ha Eliminado Exitosamente");
        }
        else
            Toast.ShowError("No se pudo localizar la Persona indicada");
    }
}
